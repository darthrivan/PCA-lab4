1.

a) 

lab4_session/pi> /usr/bin/time ./pi.3ni > /dev/null
3.22user 0.00system 0:03.24elapsed 99%CPU (0avgtext+0avgdata 1648maxresident)k
0inputs+0outputs (1major+149minor)pagefaults 0swaps
lab4_session/pi> 

b)

lab4_session/pi> /usr/bin/time ./pi.3 > /dev/null
2.86user 0.00system 0:02.87elapsed 99%CPU (0avgtext+0avgdata 1664maxresident)k
0inputs+0outputs (1major+150minor)pagefaults 0swaps
lab4_session/pi> 

c) 

DIVIDE
LONGDIV
MULTIPLY
SET
SUBTRACT
progress

d)

no inline - inline

DIV 100100025
MUL 20010
SAR 0
SHR -100100025

Haciendo inline el compilador ha podido substituir las divisiones por shifts y reducir el numero de multiplicaciones.

e)

lab4_session/pi> /usr/bin/time ./pi.3ni > /dev/null
2.83user 0.00system 0:02.84elapsed 99%CPU (0avgtext+0avgdata 1664maxresident)k
0inputs+0outputs (1major+150minor)pagefaults 0swaps
lab4_session/pi> 



LOOP UNROLLING
======================

2. .............performance impact of applying loop unrolling to matriu4x4.c........


ORIGINAL TIMING -O2 option

PCA-lab4-master/matriu4x4> /usr/bin/time ./matriu4x4.2 > /dev/null 
0.56user 0.00system 0:00.56elapsed 99%CPU (0avgtext+0avgdata 1552maxresident)k
0inputs+0outputs (0major+138minor)pagefaults 0swaps
PCA-lab4-master/matriu4x4> 

------------A-----------------

i)

PCA-lab4-master/matriu4x4> /usr/bin/time ./matriu4x4.2 > /dev/null
0.45user 0.00system 0:00.46elapsed 99%CPU (0avgtext+0avgdata 1552maxresident)k
0inputs+0outputs (0major+138minor)pagefaults 0swaps
PCA-lab4-master/matriu4x4> 

ii)

With opcontrol (opreport -l matriu4x4.pg2) we obtain:n:

samples  %        symbol name
64214    99.8492  main
76        0.1182  write_gmon
2         0.0031  _IO_wfile_overflow
2         0.0031  __printf_fphex
2         0.0031  strchrnul
1         0.0016  _IO_file_setbuf_mmap
1         0.0016  _IO_flush_all_lockp
1         0.0016  _IO_new_file_xsputn
1         0.0016  __gconv_transform_internal_ucs2reverse
1         0.0016  __libc_init_secure
1         0.0016  __libc_sigaction
1         0.0016  _dl_discover_osversion
1         0.0016  _dl_non_dynamic_init
1         0.0016  brk
1         0.0016  free
1         0.0016  getenv
1         0.0016  memcpy
1         0.0016  profil
1         0.0016  random_r
1         0.0016  vfprintf



iii)

(((((17*4)+16)*4)+22)*4)= 1432 instructions

------------B-----------------

i)

PCA-lab4/matriu4x4> !/us
/usr/bin/time ./matriu4x4.2 > /dev/null
0.38user 0.00system 0:00.39elapsed 98%CPU (0avgtext+0avgdata 1552maxresident)k
0inputs+0outputs (0major+138minor)pagefaults 0swaps
PCA-lab4/matriu4x4> 

As we can see, the speedup is 1.18 between this unrolled k-loot version and the
 just inlined-by-hand version.
 
ii)

With opcontrol (opreport -l matriu4x4.pg2) we obtain:

samples  %        image name               symbol name
47715    99.7846  matriu4x4.pg2            main
75        0.1568  matriu4x4.pg2            write_gmon
3         0.0063  matriu4x4.pg2            profil_counter
3         0.0063  matriu4x4.pg2            vfprintf
2         0.0042  matriu4x4.pg2            _int_malloc
1         0.0021  anon (tgid:7074 range:0xb7764000-0xb77ec000) anon (tgid:7074 range:0xb7764000-0xb77ec000)
1         0.0021  matriu4x4.pg2            _IO_doallocbuf
1         0.0021  matriu4x4.pg2            _IO_file_seekoff_mmap
1         0.0021  matriu4x4.pg2            _IO_flush_all_lockp
1         0.0021  matriu4x4.pg2            _IO_new_file_overflow
1         0.0021  matriu4x4.pg2            _IO_new_file_write
1         0.0021  matriu4x4.pg2            __gconv_transform_internal_ucs2reverse
1         0.0021  matriu4x4.pg2            __internal_atexit
1         0.0021  matriu4x4.pg2            __mcount_internal
1         0.0021  matriu4x4.pg2            __printf_fphex
1         0.0021  matriu4x4.pg2            __setfpucw
1         0.0021  matriu4x4.pg2            _init
1         0.0021  matriu4x4.pg2            getenv
1         0.0021  matriu4x4.pg2            mcount
1         0.0021  matriu4x4.pg2            mmap
1         0.0021  matriu4x4.pg2            munmap_chunk
1         0.0021  matriu4x4.pg2            profil
1         0.0021  matriu4x4.pg2            strchrnul
1         0.0021  matriu4x4.pg2            strerror_r
1         0.0021  matriu4x4.pg2            strlen


iii)

(((((17*4)+16)*4)+22)*4)= 1432 instructions

------------C-----------------

i)

PCA-lab4/matriu4x4> !/us
/usr/bin/time ./matriu4x4.2 > /dev/null
0.23user 0.00system 0:00.24elapsed 98%CPU (0avgtext+0avgdata 1568maxresident)k
0inputs+0outputs (0major+139minor)pagefaults 0swaps
PCA-lab4/matriu4x4> 

The speedup is 1.65 compared to the k loop unrolling version above.

ii)

With opcontrol (opreport -l matriu4x4.pg2) we obtain:

samples  %        symbol name
25691    99.6470  main
74        0.2870  write_gmon
2         0.0078  _IO_new_file_seekoff
2         0.0078  _IO_wfile_overflow
2         0.0078  __libc_setup_tls
1         0.0039  __deregister_frame_info_bases
1         0.0039  __init_misc
1         0.0039  _dl_aux_init
1         0.0039  _dl_init_paths
1         0.0039  _int_malloc
1         0.0039  backtrace
1         0.0039  brk
1         0.0039  frame_dummy
1         0.0039  getenv
1         0.0039  memcpy
1         0.0039  vfprintf


iii)

26+(((91*4)+6)*4)= 1506 instructions.

------------D-----------------

i)

PCA-lab4/matriu4x4> !/us
/usr/bin/time ./matriu4x4.2 > /dev/null
0.09user 0.00system 0:00.10elapsed 96%CPU (0avgtext+0avgdata 1568maxresident)k
0inputs+0outputs (1major+138minor)pagefaults 0swaps
PCA-lab4/matriu4x4> 

This version has a 2.5 speedup over the previous one.

ii)

With opcontrol (opreport -l matriu4x4.pg2) we obtain:

samples  %        image name               symbol name
17605    99.8865  matriu4x4.pg2            main
5         0.0284  matriu4x4.pg2            vfprintf
1         0.0057  anon (tgid:4395 range:0xb76d1000-0xb7759000) anon (tgid:4395 range:0xb76d1000-0xb7759000)
1         0.0057  matriu4x4.pg2            _IO_file_doallocate
1         0.0057  matriu4x4.pg2            _IO_file_xsgetn
1         0.0057  matriu4x4.pg2            _IO_new_do_write
1         0.0057  matriu4x4.pg2            _IO_new_file_write
1         0.0057  matriu4x4.pg2            __gconv_transform_ucs2reverse_internal
1         0.0057  matriu4x4.pg2            __new_exitfn
1         0.0057  matriu4x4.pg2            __profile_frequency
1         0.0057  matriu4x4.pg2            free
1         0.0057  matriu4x4.pg2            getenv
1         0.0057  matriu4x4.pg2            malloc_consolidate
1         0.0057  matriu4x4.pg2            profil
1         0.0057  matriu4x4.pg2            ptmalloc_init
1         0.0057  matriu4x4.pg2            setitimer
1         0.0057  matriu4x4.pg2            strlen

iii)

(59*4)+300+31 = 567 instructions.

------------E-----------------

As we can see, the las degree of unrolling is the one that offers a 
better performance due to the number of instructions that it has to 
execute. This is possible because it avoids jumps and iterator changes 
over the loop counters to find the numbers to multiply and to 
store (mov instructions).


3.  Apply to the ORIGINAL CODE of matriu4x4.c..........

a)

b)

PCA-lab4/matriu4x4> /usr/bin/time ./matriu4x4.3 > /dev/null
0.31user 0.00system 0:00.32elapsed 98%CPU (0avgtext+0avgdata 1552maxresident)k
0inputs+0outputs (0major+138minor)pagefaults 0swaps
PCA-lab4/matriu4x4> 

c)
With opcontrol (opreport -l matriu4x4.pg3) we obtain:

samples  %        symbol name
33698    99.9614  multiplica
3         0.0089  profil_counter
2         0.0059  _IO_wdo_write
1         0.0030  _IO_new_file_seekoff
1         0.0030  __deregister_frame_info_bases
1         0.0030  __mcount_internal
1         0.0030  __new_exitfn
1         0.0030  _dl_non_dynamic_init
1         0.0030  getenv
1         0.0030  profil
1         0.0030  random


d)
((((7*4)+7)*4)+8)*4= 592 instructions.

e)

f)

Va al rev√©s.

